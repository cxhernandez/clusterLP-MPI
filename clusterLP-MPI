#!/usr/bin/env python
###############################################################################
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 2.1 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
# details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
###############################################################################
"""
Cluster a protein-ligand system with RMSD using separate sets of atoms for the
alignment and distance computation. Both the "alignment" and "distance" atoms
for each frame will be loaded, and in each frame, the cartesian center of the
alignment atoms is computed and subtracted out of the coordinates of both the
alignment and distance atoms.

Distances are calculated between two frames by computing the rotation matrix
which optimally overlays the alignment atoms with one and other, and then
applying that rotation matrix to the distance atoms in the first frame and
computing their root-mean-squared deviation w.r.t the other frame.

Clustering is performed with the k-centers algorithm. You may specify the
termination criterion either by the number of states, or a cutoff distance
(which ensures that all data points are within that distance of their assigned
cluster center).

This script uses hybrid MPI/OpenMP paralleism in addition to highly optimized
SIMD vectorization within the compute kernels. Using multiple MPI processes
requires running this command using your MPI implementation's process manager,
e.g. `mpirun`, `mpiexec`, or `aprun`. The number of OpenMP threads can be
controled by setting the OMP_NUM_THREADS environment variable. (e.g.
$ export OMP_NUM_THREADS=4; mpirun -np 16 clusterLP-MPI <options>)

Authors: Robert McGibbon
Contributors: Morgan Lawrenz, Carlos Hernandez
"""
#-----------------------------------
# Imports
#-----------------------------------
from __future__ import print_function, division
import os
import sys
if sys.version_info < (2, 7):
    print("Your Python interpreter is too old. Please consider upgrading.")
    sys.exit(1)
import glob
import time
import datetime
import itertools
import warnings
import argparse
import numpy as np
import scipy.optimize

try:
    import mdtraj as md
    from mdtraj.utils import ensure_type
except ImportError:
    print("This package requires the latest development version of MDTraj")
    print("which can be downloaded from https://github.com/rmcgibbo/mdtraj")
    sys.exit(1)
try:
    from mpi4py import MPI
except:
    print("This package requires mpi4py, which can be downloaded")
    print("from https://pypi.python.org/pypi/mpi4py")
    sys.exit(1)

#-----------------------------------
# Globals
#-----------------------------------
COMM = MPI.COMM_WORLD
RANK = COMM.rank
SIZE = COMM.size

#-----------------------------------
# Code
#-----------------------------------


class Transformation(object):
    """Operator capable of rotating and translating a conformation

    Parameters
    ----------
    rotation : np.array, shape=(3,3)
        Rotation matrix
    rotation : np.array, shape=(3)
        Translation vector
    """
    def __init__(self, rotation, translation):
        self.rotation = rotation
        self.translation = translation

    def transform(self, coordinates):
        """Apply an affine transformation to a set of coordinates.

        Parameters
        ----------
        coordinates : ndarray, shape = (n_atoms, 3)
            xyz coordinates of a `single` frame.

        Returns
        -------
        mapped_coordinates : ndarray, shape = (n_atoms, 3)
            xyz coordinates after being rotated and translated

        """
        mu1 = coordinates.mean(0)
        return coordinates.dot(self.rotation) + self.translation - mu1.dot(self.rotation)

    def __call__self(self, coordinates):
        return self.transform(coordinates)


def compute_transformation(mobile, target):
    """Returns a Transformation object to align mobile onto target.

    Parameters
    ----------
    mobile : ndarray, shape = (n_atoms, 3)
        xyz coordinates of a `single` frame, to be aligned onto target.
    target : ndarray, shape = (n_atoms, 3)
        xyz coordinates of a `single` frame

    Returns
    -------
    T : Transformation aligning mobile to target.
    """
    translation, rotation = compute_translation_and_rotation(mobile, target)
    return Transformation(rotation, translation)


def transform(mobile, target):
    """Align mobile onto target and return transformed coordinates.

    Parameters
    ----------
    mobile : ndarray, shape = (n_atoms, 3)
        xyz coordinates of a `single` frame, to be aligned onto target.
    target : ndarray, shape = (n_atoms, 3)
        xyz coordinates of a `single` frame

    Returns
    -------
    mobile_prime : ndarray, shape = (n_atoms, 3)
        Transformed coordinates of mobile, optimally aligned to target.
    """
    T = compute_transformation(mobile, target)
    mobile_prime = T.transform(mobile)
    return mobile_prime


def compute_translation_and_rotation(mobile, target):
    """Returns the translation and rotation mapping mobile onto target.

    Parameters
    ----------
    mobile : ndarray, shape = (n_atoms, 3)
        xyz coordinates of a `single` frame, to be aligned onto target.
    target : ndarray, shape = (n_atoms, 3)
        xyz coordinates of a `single` frame

    Returns
    -------
    translation : ndarray, shape=(3,)
        Difference between the centroids of the two conformations
    rotation : ndarray, shape=(3,3)
        Rotation matrix to apply to mobile to carry out the transformation.
    """

    ensure_type(mobile, 'float', 2, 'mobile', warn_on_cast=False, shape=(None, 3))
    ensure_type(target, 'float', 2, 'target', warn_on_cast=False, shape=(target.shape[0], 3))

    mu1 = mobile.mean(0)
    mu2 = target.mean(0)

    translation = mu2

    mobile = mobile - mu1
    target = target - mu2

    correlation_matrix = np.dot(np.transpose(mobile), target)
    V, S, W_tr = np.linalg.svd(correlation_matrix)
    is_reflection = (np.linalg.det(V) * np.linalg.det(W_tr)) < 0.0
    if is_reflection:
        V[:, -1] = -V[:, -1]
    rotation = np.dot(V, W_tr)

    return translation, rotation


def rmsd_kabsch(xyz1, xyz2):
    """Returns the RMSD distance between conformations xyz1 and xyz2.

    Parameters
    ----------
    xyz1 : ndarray, shape = (n_atoms, 3)
        xyz1 coordinates of a SINGLE frame
    xyz2 : ndarray, shape = (n_atoms, 3)
        xyz2 coordinates of a SINGLE frame
    Returns
    -------
    rmsd : float
        RMSD between xyz1 and xyz2
    """
    xyz1_prime = transform(xyz1, xyz2)
    delta = xyz1_prime - xyz2
    rmsd = (delta ** 2.0).sum(1).mean() ** 0.5
    return rmsd

def printM(message, *args):
    if RANK == 0:
        if len(args) == 0:
            print(message)
        else:
            print(message % args)

class timing(object):
    "Context manager for printing performance"
    def __init__(self, name):
        self.name = name
    def __enter__(self):
        self.start = time.time()
    def __exit__(self,ty, val, tb):
        end = time.time()
        print("<RANK %d> PERFORMANCE [%s] : %0.3f seconds" % (RANK, self.name, end-self.start))
        return False

def MPI_vectorAllMaxloc(input):
    """
    MaxLoc Reduction. Each rank provides input data, and the return
    value, on each node, is a triplet containing the rank, index and value of
    the maximum entry. It's a global argmax.

    Copied from Tungsten https://github.com/rmcgibbo/tungsten
    """

    maxTrajLength = np.array(0)
    valueIndex = np.dtype([('value',np.float32), ('index', np.int32)])

    # Share the longest trajectory length with all of the nodes so that
    # each can properly compute a unique index of
    # localIndex + rank*maxLengthOfAnyLocalIndex
    COMM.Allreduce(np.array(len(input)), maxTrajLength, MPI.MAX)

    # local maxloc
    argmax = np.argmax(input)
    localMaxLoc = np.array((input[argmax], argmax), dtype=valueIndex)
    globalMaxLoc = np.zeros(1, dtype=valueIndex)

    # give the local maxloc a globaly-resolvably index
    localMaxLoc['index'] = localMaxLoc['index'] + RANK * int(maxTrajLength)

    # global maxloc
    COMM.Allreduce((localMaxLoc, MPI.FLOAT_INT), (globalMaxLoc, MPI.FLOAT_INT), op=MPI.MAXLOC)
    outRank = int(globalMaxLoc['index']) // int(maxTrajLength)
    outIndex = int(globalMaxLoc['index']) % int(maxTrajLength)
    outValue = float(globalMaxLoc['value'])

    return outRank, outIndex, outValue


class MPIKCenters(object):
    def __init__(self, traj, topology, n_protein, n_ligand):

        self.n_frames = traj.n_frames
        self.topology = topology
        self.protein_indices = range(n_protein)
        self.ligand_indices = range(n_protein,n_protein+n_ligand)
        self.trajectory = traj.superpose(topology,atom_indices=self.protein_indices)

    def cluster(self, n_states=None, rmsd_cutoff=None):
        distances = np.empty(self.n_frames, np.float)
        distances.fill(np.inf)
        assignments = np.empty((self.n_frames, 2), np.int)
        centers = []

        if n_states is None:
            counter = itertools.count()
        else:
            counter = range(n_states)

        for i in counter:
            maxRank, maxIndex, maxValue = MPI_vectorAllMaxloc(distances)
            if (rmsd_cutoff is not None) and (maxValue < rmsd_cutoff):
                break
            printM("Found new center (%d, %d), %f", maxRank, maxIndex, maxValue)
            new_distances = self.get_RMSDs_from(maxRank, maxIndex)

            new_assignments = (new_distances < distances)
            distances[new_assignments] = new_distances[new_assignments]
            assignments[new_assignments, :] = [maxRank, maxIndex]

            centers.append((maxRank, maxIndex))

        printM("Identified %d clusters", len(centers))
        return centers

    def get_RMSDs_from(self, targetRank, targetIndex):
        if targetRank >= SIZE:
            raise IndexError("No such rank.")
        if RANK == targetRank and targetIndex >= self.n_frames:
            raise IndexError("No such index")
            
        if RANK == targetRank:
            frame = targetIndex
            
        COMM.bcast(frame, root=targetRank)
        
        rmsds = md.rmsd(self.trajectory[frame],self.trajectory,atom_indices=self.ligand_indices,precentered=True)
        
        return rmsds


def main(protein_indices, ligand_indices, stride, trajectory_files,
         topology_file, out_filename, n_states, rmsd_cutoff):

    if len(np.intersect1d(protein_indices, ligand_indices)) != 0:
        raise ValueError('The set intersection of protein_indices and ligand_indices must be empty.')
    joint_indices = np.concatenate((protein_indices, ligand_indices))
    n_protein, n_ligand, n_joint = len(protein_indices), len(ligand_indices), len(joint_indices)

    with timing('Loading Trajectories'):
        topology = md.load(topology_file)
        traj = md.load(trajectory_files[0], top=topology, stride=stride, atom_indices=joint_indices)
        for f in trajectory_files[1:]:
            traj = traj + md.load(f, top=topology, stride=stride, atom_indices=joint_indices)

    with timing('Clustering'):
        kc = MPIKCenters(traj, topology, n_protein, n_ligand)
        centers = kc.cluster(n_states, rmsd_cutoff)
    out_filename=out_filename[:-4] + '_' + str(RANK) + '.csv'
    f=open(out_filename, 'w', 0)
    print('\nSaving clusters centers to %s...' % out_filename)
    for i in range(len(centers)):
        if RANK == centers[i][0]:
            trajid = np.max(np.where(centers[i][1] >= cumulative_lengths)[0])
            frame = centers[i][1] - cumulative_lengths[trajid]
            trj = trajectory_files[trajid]
            f.write('%s, %d\n' % (trj, frame))
    printM('Done saving cluster centers.')

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('-pi', '--protein-indices', required=True,
                        help='''Path to a file containing the space-separated
                        zero-based indices of the protein atoms.''')
    parser.add_argument('-li', '--ligand-indices', required=True,
                        help='''Path to a file containing the space-separated
                        zero-based indices of the ligand atoms.''')
    parser.add_argument('-td', '--traj-dir', required=True,
                        help='Path to a directory containing the trajectories')
    parser.add_argument('-ext', choices=['xtc', 'netcdf', 'dcd', 'nc', 'h5', 'lh5', 'binpos', 'trr'],
                        required=True, help='''File extension of the trajectories. All files
                        inside `trj-dir` with the supplied extension will be loaded.''')
    parser.add_argument('-top', '--topology', required=True,
                        help='''Path to a RCSB PDB file which exactly correspond,
                        in terms of atom numbering, to the trajectories loaded
                        from `traj_dir`''')
    parser.add_argument('-s', '--stride', type=int, default=1, help='''You may
                        supply a stride to load only every n-th frame from each
                        trajectory into memory. This can be useful to speed up
                        clustering time, or if the number of frames in your
                        dataset is larger than the total available memory for
                        the job. Default=1''')
    parser.add_argument('-o', '--out', default='clusters.csv', help='''Path to
                        save the output, a csv file containing the indices of the cluster
                        centers. Default=clusters.csv''')
    cutoff = parser.add_mutually_exclusive_group(required=True)
    cutoff.add_argument('-k', '--n-states', type=int, help='''Number of states.
                        Either this or `rmsd-cutoff` must be specified as a
                        termination criterion''')
    cutoff.add_argument('-d', '--rmsd-cutoff', type=float, help='''RMSD cutoff.
                        Either this or `rmsd-cutoff` must be specified as a
                        termination criterion''')

    args = parser.parse_args()
    try:
        if RANK == 0 and not os.path.isfile(args.protein_indices):
            parser.error('No such file: %s' % args.protein_indices)
        if RANK == 0 and not os.path.isfile(args.ligand_indices):
            parser.error('No such file: %s' % args.ligand_indices)
        if RANK == 0 and not os.path.isfile(args.topology):
            parser.error('No such file: %s' % args.topology)
        if RANK == 0 and args.stride < 1:
            parser.error('stride must be >= 1')
    except SystemExit:
        if SIZE > 1:
            COMM.Abort()
        exit()

    protein_indices = np.sort(np.loadtxt(args.protein_indices, int))
    ligand_indices = np.sort(np.loadtxt(args.ligand_indices, int))
    query_dir = os.path.join(os.path.expandvars(os.path.expanduser(args.traj_dir)), '*.%s' % args.ext)
    trajectories = glob.glob(query_dir)

    try:
        if RANK == 0 and len(trajectories) == 0:
            parser.error('No trajectories found matching %s' % query_dir)
        if RANK == 0 and protein_indices.ndim != 1:
            parser.error('protein_indices must be 1 dimensional.')
        if RANK == 0 and ligand_indices.ndim != 1:
            parser.error('ligand_indices must be 1 dimensional.')
        if RANK == 0 and len(trajectories) < SIZE:
            parser.error('The number of MPI ranks may not be greater than '
                         'the number of trajectories')
    except SystemExit:
        if SIZE > 1:
            COMM.Abort()

    # The trajectories will be interleaved between the MPI ranks.
    # This is not necessarily the most efficient allocation for memory usage if some of the
    # trajectories are much longer than others, but it's close enough and simple.
    trajectories = trajectories[RANK::SIZE]

    main(protein_indices, ligand_indices, args.stride, trajectories,
         args.topology, args.out, args.n_states, args.rmsd_cutoff)
